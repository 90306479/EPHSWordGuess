//
//  MessagesViewController.swift
//  MessageApp MessagesExtension
//
//  Created by 90306479 on 2/25/22.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    
    @IBOutlet weak var guessValue: UITextField!
    
    
    @IBOutlet weak var previousGuess: UILabel!
    
    
    var guesses = ""
    
    var currentGuess: String = ""
    
    var lastGuess: String = ""
    
    var caption = "Want to play Wordle?"
    
    @IBOutlet weak var guessLabel: UILabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    @IBAction func clickedGuess(_ sender: UIButton) {
        
        currentGuess = guessValue.text!
        guessLabel.text = currentGuess
        guesses = guesses + " " + currentGuess
        
        let url = prepareURL()
        prepareMessage(url)
    }
    
    
    func prepareURL() -> URL {
        
        var urlComponents = URLComponents()
        urlComponents.scheme = "https";
        urlComponents.host = "www.ebookfrenzy.com";
        let guessQuery = URLQueryItem(name: "Guess", value: currentGuess)
        let allGuessesQuery = URLQueryItem(name: "allGuesses", value: guesses)
        urlComponents.queryItems = [guessQuery, allGuessesQuery]
        return urlComponents.url!
        
    }
    
    func prepareMessage(_ url: URL) {
        
        let message = MSMessage()
        
        let layout = MSMessageTemplateLayout()
        layout.caption = caption
        
        layout.image = UIImage(named: "icon")
        
        message.layout = layout
        message.url = url
        
        let conversation = self.activeConversation
        
        conversation?.insert(message, completionHandler: {(error) in
            if let error = error {
                print(error)
            }
        })
        
        self.dismiss()
        
    }
    
    func decodeURL(_ url: URL) {
        
        let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
        
        for (index, queryItem) in (components?.queryItems?.enumerated())! {
//            if queryItem.name == "Guess" {
//                lastGuess = queryItem.value ?? ""
//                previousGuess.text = lastGuess
//            }
            if queryItem.name == "allGuesses" {
                guesses = queryItem.value ?? ""
                previousGuess.text = guesses
            }
        }
    }
    
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        
        if let messageURL = conversation.selectedMessage?.url {
            decodeURL(messageURL)
            caption = "It's your move!"
        }
       
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
